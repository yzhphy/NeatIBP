
=======================
ver 1
=======================
In SyzygyRed.wl

I have changed "!=" somewhere to "=!="  (zihao 2022.04 .06)
I have changed the name of variable "FF" to "FF1" in function \
SingularIdeal, to avoid possible contradiction with FiniteFlow. \
(zihao 2022.04 .08)
I have added some timing reports in the codes. 
  For this, a new variable is declared named TimingReportOfRowReduce. \
(zihao 2022.04 .08)
I have added many time reports (zihao someday)
I have added "exit;" in SingularIntersectionText and SingularSyzText \
in order to use them in command line (zihao 2022.04 .25)
I added PrintAndLog function. I replaced all Print[ 
  to PrintAndLog[ (zihao 2022.04 .29)
       I added an option to probe (zihao 2022.05 .03)
       
       zihao 2022.05 .06 :
      Function pivots[matrix] is defined twice. 
        I removed the first one. 
        I have make the RowReduceFunction optional. 
        By default using Hefeng`s SRSparseRowReduce.
        I have changed the default prime modulus from 32452843 to 42013
       I have modified \
"Mext=Join[Transpose[M],IdentityMatrix[M//Length]]//Transpose" to \
"Mext=Join[Transpose[M],SparseIdentityMatrix[M//Length]]//Transpose" 
       	in function UsedRelations. Where SparseIdentityMatrix[n_] := 
     SparseArray[Table[{k, k} -> 1, {k, n}]]
      	
      zihao 2022.05 .07
      I have deleted the step "CollectG" in function SectorAnalyze
      
      zihao 2022.05 .09
      In function SectorAnalyze, 
    		IBPISPdegrees = 
     IBPISPSectorDegree[#, sector] & /@ (CornerIBP /. GenericD // 
          Expand)
       has been modified to 
       		IBPISPdegrees = IBPISPSectorDegree[
         			Collect[
          				# /. GenericD /. GenericPoint,
          				Cases[Variables[#], _G]
          			]
         			, sector
         		] & /@ (CornerIBP);
    		
    zihao 2022.05 .12  
     when cauculating sector #938 of the triplebox example, 
    the SingularIntersection returned a VectorList, 
    such that VectorList[[212]] = 0, 
    but it is supposed to be a vector, not 0.
     The phenomenon comes from the Singular running step, 
    after simplify (m12, 12) command, 
    the 212 th element of the result matrix is 0, 
    but it is supposed to be linear combinations of gen ( ...)
     The Singular website is failed, 
    so I cannot study why this is happening (maybe because the \
simplification mode 12)
     The problem singular script is in  /home/zihao/projects/
         SyzygyRed/Parallelization/test_triplebox/
      intersection_test _bug _ 938. sing, 
    we should study what maybe wrong as soon as the Singular website \
recovered.
      Now, we have no choice but to add a command 
     If[Count[vectors, 0] > 0, 
      PrinAndLog["#", secNum, 
       "  ZEROs in VectorList Encountored!!They are deleted."]; 
      vectors = DeleteCases[vectors, 0]]; 
    in function IntersectionRead.
       BUT REMEMBER!! This is a YAN - ER - DAO - LING behaviour, 
    because it is possible that there DO EXIST some BUGs in the \
Singular step, 
    and we just temply turn off the warning ... so ... The result may \
be WRONG!
     MAKE SURE you fix the possible bug once Singular website \
recover!/home/zihao/projects/SyzygyRed/Parallelization/
      test_double _pentagon/Analyze_Sector.wl
     
     zihao  2022.05 .13
     Singular web site has recovered.
      After looking it up, we can delete the command 
     If[Count[vectors, 0] > 0, 
      PrinAndLog["#", secNum, 
       "  ZEROs in VectorList Encountored!!They are deleted."]; 
      vectors = DeleteCases[vectors, 0]]; 
    in function IntersectionRead. 
      There seems to be no error. 
      What we only need to do is just modify the OptionSimplification \
from 12 to 14.
     
     zihao 2022.05 .16
     I added option in SectorAnalyze to choose module intersection \
method, Linear or Singular
      
      zihao 2022.05 .18
      required the program to report ByteCount of VectorList
      
      zihao 2022.05 .24
      Added an option to shorten the module M1 and M2
      
      In function SingularIntersectionMaker 
      varpara = Variables[Join[M1, M2]];
    is modified to 
      varpara = Variables[Join[M1ext, M2]];
    
    in string SingularIntersectionText
      module m = m1 + m2; is modified to module m = m1, m2;
    
    zihao 2022.09 .09
     added functions :
      FIBPSectorISPDegree
       FIntegralSectorISPDegree
       In function SectorAnalyze, 
    	IBPISPdegrees = IBPISPSectorDegree[
        			Collect[
         				# /. GenericD /. GenericPoint,
         				Cases[Variables[#], _G]
         			]
        			, sector
        		] & /@ (CornerIBP);
    has been modified to 
      IBPISPdegrees = FIBPSectorISPDegree[#, sector] & /@ FIBPs;
    Before the modification, 
    Zurich seeding gives more MIs than expected.

=======================
ver 2
=======================


-----------------------------
2022.09.13
support calculation in one folder


-----------------------------
2022.09.20
made a backup


-----------------------------
2022.09.22
[I]
put codes in Symmetry.wl into SyzygyRed.wl , but it still needs to include Pak.wl\

In SyzygyRed.wl added a step, sector mapping, before removing zero sector integrals (nearly at the botom of main function). Consequently, there will be no new target integrals in mapped sectors while complying AnalyzeSector.wl. 

[II]
Changed "Initialization.wl" so that:

A.set a framewor to deal with mapped integral targets.
The framework is set as:
1. The only mapped targets will occur as an input. If NeedSymmetry Option is turned on, we map these targets at initilalization, export the symmetry relations as IBPs, and export {} as MI.
2. Export the mission status of mapped sectors to be "ComputationFinished"

B.Moreover, at initialization, we additionally export zero integrals as zero.

[III]
created summary.wl
----------------------------------
2022.09.23

[I]
In SyzygyRed.wl
For[i=1,i<=Length[Global`NonZeroSectors],i++,
			subsector=Global`NonZeroSectors[[i]];
			Global`ReductionTasks[subsector]=Union[Global`ReductionTasks[subsector],Select[SubsectorInts,Sector[#]==subsector&]];
		];

changed Global`NonZeroSectors to tailSectors(=DeleteDuplicates[Sector/@SubsectorInts])

[II]
Added function MappedAndSubSectorsAllFinder in SyzygyRed.wl
Modified AnalyzeSector.wl to use MappedAndSubSectorsAllFinder rather than SubsectorAllFinder to find RelavantSectors if NeedSymmetry is on. However, Initialization.wl temply remain the same, this may cause trouble when input targets are not in top sector but in separate subsectors. NEED TO BE IMPROVED!!!

[III]
Cancelled function SuperSectors[] in all .wl files but MissionStatusChecke.wl, because it is not used theres.

Modified function SuperSectors[] in MissionStatusChecke.wl (backuped old version using (**)). Originally, master missions were calculated real-timely. In new version, this tree structure is calculated at initialization and saved on the disk. The new function only read it and use.

[IV]
made a backup 


-----------------------
2022.09.26
[I]
In function SyzygyRed.wl, the step "sorting nFIPBs" is too slow, sometimes taking 50% the time cost.
I added some timeing reports in this step. 
As observed, the bottle neck link is IBPSubSectorDegree <- IntegralList <- SortBy
The IntegralList command automatically sort the integrals, but in this step we do not need.
So, I added an option to function IntegralList, to determine weather we sort the integrals. Default is yes.
Then ,I added option value SortTheIntegrals->False to function IntegralList where it was called by: 
IBPWeight
IBPSubSectorDegree
IBPISPSectorDegree
Length

[II]
added a criterion of step "sort nFIBPs": ByteCount

[III]
added function SectorSelfSymmetryIBPs

[IV]
made a backup. We will keep on adding symmetry inside sectors




----------------------
2022.09.27

[I]
Add sector self symmetry related codes in SyzygyRed.wl

modified codes from 

	nIBPs=rawIBPs/.FI[i_]:>nFIBPs[[i]]/.IntegralR->IntegralRealization;

to

	If[NeedSymmetry===False,
			nIBPs=rawIBPs/.FI[i_]:>nFIBPs[[i]]/.IntegralR->IntegralRealization/.Cut
		,
			rawIBPs=Join[
				rawIBPs,
				Table[SelfSymmetryR[ZM[i],seeds[[j]]],{i,1,Length[zMaps]},{j,1,Length[seeds]}]//Flatten
			];
			nIBPs=rawIBPs;
			nIBPs=nIBPs/.FI[i_]:>nFIBPs[[i]]/.IntegralR->IntegralRealization;
			nIBPs=nIBPs/.ZM[i_]:>zMaps[[i]]/.SelfSymmetryR->SelfSymmetryRealization;
			nIBPs=nIBPs/.Cut;
		];

from 
	rawIBPs=Join[rawIBPs,newIBPs];
	nIBPs=Join[nIBPs,newIBPs/.FI[i_]:>nFIBPs[[i]]/.IntegralR->IntegralRealization/.Cut];

to
	If[NeedSymmetry===False,
		rawIBPs=Join[rawIBPs,newIBPs];
		nIBPs=Join[nIBPs,newIBPs/.FI[i_]:>nFIBPs[[i]]/.IntegralR->IntegralRealization/.Cut];
	,
		newIBPs=Join[
			newIBPs,
			Table[SelfSymmetryR[ZM[i],seeds[[j]]],{i,1,Length[zMaps]},{j,1,Length[seeds]}]//Flatten
		];
		rawIBPs=Join[rawIBPs,newIBPs];
		newNIBPs=newIBPs;
		newNIBPs=newNIBPs/.FI[i_]:>nFIBPs[[i]]/.IntegralR->IntegralRealization;
		newNIBPs=newNIBPs/.ZM[i_]:>(zMaps[[i]]/.GenericPoint)/.SelfSymmetryR->SelfSymmetryRealization;
		newNIBPs=newNIBPs/.Cut;
		nIBPs=Join[nIBPs,newNIBPs]
	];
Added codes afer Zurich seedings:
If[Not[NeedSymmetry===False],
	timer2=AbsoluteTime[];
	If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"  \t","Appending self-symmetries at current step..."];];

	seeds=Flatten[SeedMerge[NumeratorShifts[sector,#],DenominatorTypes]&/@Range[0,OptionValue[ZurichInitialSteps]],1];
	
	rawIBPs=Join[
		rawIBPs,
		Table[SelfSymmetryR[ZM[i],seeds[[j]]],{i,1,Length[zMaps]},{j,1,Length[seeds]}]//Flatten
	];
	
	nIBPs=Join[
		nIBPs,
		Table[SelfSymmetryRealization[zMaps[[i]]/.GenericPoint,seeds[[j]]],{i,1,Length[zMaps]},{j,1,Length[seeds]}]//Flatten
	];
	If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"  ","\t\tAppending self-symmetries finished. Time Used: ", Round[AbsoluteTime[]-timer2], " second(s)."]];
	
	];
or 

If[Not[NeedSymmetry===False],
		timer2=AbsoluteTime[];
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"  \t","Appending self-symmetries at current step..."];];
		seeds=Flatten[SeedMerge[NumeratorShifts[sector,#],DenominatorTypes]&/@Range[0,OptionValue[ZurichInitialSteps]],1];
		NewrawIBPs=Join[
			NewrawIBPs,
			Table[SelfSymmetryR[ZM[i],seeds[[j]]],{i,1,Length[zMaps]},{j,1,Length[seeds]}]//Flatten
		];
		NewnIBPs=Join[
			NewnIBPs,
			Table[SelfSymmetryRealization[zMaps[[i]]/.GenericPoint,seeds[[j]]],{i,1,Length[zMaps]},{j,1,Length[seeds]}]//Flatten
		];
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"  ","\t\tAppending self-symmetries finished. Time Used: ", Round[AbsoluteTime[]-timer2], " second(s)."]];
	];



At step obtaining the analytic IBPs, added codes:
(it seems nothing need to be added here --- 2022.10.13)
--------------
2022.09.28
[I]
made a backup

[II]
added SparseRREF package in the working folder. Modified <<SparseRREF` to Get[workingPath<>"SparseRREF/SparseRREF.m"]
After this , we expect that user no longer need to install SparseRREF manually when they get this program

--------------------
2022.10.13
[I]
renamed "Pak" to "Pak_Algorithm"
deleted functions not used in the package Pak_Algorithm.wl

[II]
fixed an error in Initialization.wl
modified 
mapIBPs=#-(#/.G[x__]:>GMapped[sectorMaps,{x}])&/@mappedTargets;
to
mapIBPs=#-(SymmetryMap[sectorMaps,#])&/@mappedTargets;

the former one is old wrong way of mapping

[III]
modified
SDim=Length[Flatten[MIs][[1]]/.G->List]
in Summary.wl to
SDim=Length[Cases[Variables[IBPs],_G][[1]]/.G->List]

================================
ver 3
================================
Statement:
Ver2 is up-to-date at 2022.10.13
In the new version I am going to refine the folder structure, which will be brand new. 
Also, the backup branch is pushed to github named 'branch20221013'. 
The Folder 'SyzygyRed_Parallel_v2' should be remained unchanged from now
--------------------------
2022.11.07
made a backup (codes only, no .git or more github related files) at 'github' folder

--------------------------
2022.11.14
[I]
seperated the workingPath and packagePath in all codes. 
removed the SyzygyRedPackagePath variable, it is useless.
moved settings
	SingularDirectory = "/usr/bin/Singular"
	IntegralOrder = "Global"
	OptionSimplification = 12;
into input files.
Added outputPath=Automatic. We need to test what if it is not Automatic (tested)

-------------------------------
2022.11.15
made some adjustments to tha shell scripts (and .wl files) to fit in the changes yesterday.

(**)ed codes
Print["If you see an error message saying cannot open LinearSyzForLinearModule_FF_v2.wl, you can ignore it for the current version:"]
Get["/home/zihao/projects/SyzygyRed/LinearSyz/LinearSyzForLinearModule_FF_v2.wl"]
in SyzygyRed.wl

renamed SingularDirectory to SingularApp to avoid confusion, in SyzygyRed.wl and config.txt

------------------------------
2022.11.16
made a backup (for new developments for Cuts)


some modifications in Initialization.wl, preparing for cuts

-------------------------------
2022.11.17
allowing cuts

modified Cuts in SectorAnalyze[] in SyzygyRed,wl to sectorCuts to avoid name contradiction

Continue:
Add Cut opetion in AnalyzeSector.wl

put some temp files into tmp folder (where they should be)

if outputPath dosenot end with "/", add a "/"

-------------------------------
2022.11.28

modified in SyzygyRed.wl: from 
Std[f_,ref_]:=Total[(G@@(ref-#[[1]]))*#[[2]]&/@CoefficientRules[f,var,DegreeReverseLexicographic]];
to 
Std[f_,ref_]:=Total[(G@@(ref-#[[1]]))*Factor[#[[2]]]&/@CoefficientRules[f,var,DegreeReverseLexicographic]];

modified in MappedIntegral[zMap_,indices_] in SyzygyRed.wl 
Gn=Total[(G@@(#[[1]]))*(#[[2]])&/@crn];
to
Gn=Total[(G@@(#[[1]]))*(Factor[#[[2]]])&/@crn];

-------------------------------
2022.11.29

In SyzygyRed.wl - SectorAnalyze
1.put after the position of "IntegralRealization"
originally it is between "independent IBP" and "used IBP"
now it is put after "used IBP"
this will save some time

2.Removed a line in oerlikon algorithm:
SectorIntegrals=IntegralList[nIBPs]
sincxe SectorIntegrals is never used in the rest part of the function

3. modified 
rawIBPs=CoefficientArrays[rawIBPs,integrals][[2]].integrals;
to
rawIBPs=Factor[CoefficientArrays[rawIBPs,integrals][[2]]].integrals;

4.recovered the 2 modifications yesterday. I do not think it is a good idea to factor with m[i]s 

--------------------
2022.11.30

1.refined PrintAndLog Function in SyzygyRed.wl and Analyze_Sector.wl

2.add an option KillCornerSubsecIBPs in SyzygyRed.wl, to turn off a step in it
	(* Remove IBPs for lower sectors *)
	(* But this will wrongly kill some IBPs that generates IBPs not for lower sectors at non-corner seed*)
	(* I (zihao) suggest we turn off this step, the subsec IBPs will be automatically removed in the next steps so it is not needed here to do so*)

--------------------
2022.12.1

1.add a step removing subsector IBPs before sorting nFIBPs

--------------------
2022.12.11

1.built a backup 

2.start to fix an important problem:

What if a Analyze_Sector (AS) worker failed?
Solution:
Plan A: detect process name. If no such process, send a warning.
Plan B: detect running time, if it is abnormally large, send a warning

I chose plan A

But we need to face with a problem: The process command name must be distinguished in case the user runs 2 NeatIBP at a time:
we need to modify the command line of AS, to put the outputPath as the third argument of the command.

we used outputPath to distinguish different NeatIBP missions, in usual this is ok, but assuming the user could make a mistake, I put in a relevant warning in Initialzation.wl while deleting outputPath dir.s

3.added reading default settings 


--------------------
2023.1.12
In SyzygyRed.wl, function SectorMaps:
modified 
undeterminedSectors=sectors
to 
undeterminedSectors=Reverse[sectors]
so that the symmetry mapping preference is consistent with sector ordering (before that, they are reversed to each other.)


-----------------------
2023.1.18
In SyzygyRed.wl, function GMap:
added an operation G->GZeroSectorCut (a newly defined function added today)
to get rid of zero integrals after GMap

-----------------------
2023.2.6
1. fixed a bug at continue.sh (originally summary step missed)
2. input back up files will be put in a single folder
3. added usage: check ibp
4. labeled version: 1.0.0.0
5. modified version label: 1.0.0.1

---------------------------------
2023.3.14

Concerning user report of errors, added :
debugModification20230314=True
and
If[debugModification20230314,DenominatorTypes=DenominatorTypeCompleting[DenominatorTypes]];
and added functions:
DenominatorTypesFromMaxDenominatorDegrees
and
DenominatorTypeCompleting

added
targets=Complement[targets,MIs]
in CheckIBP.wl

--------------------------------
2023.3.20+
fixed a bug in SpaSM interface
modified a variable in the C codes from type int to type long

--------------------------------
2023.4.6
[I]
fixed a bug in Analyze_Sectors.wl:
Changed
Sectors=SortBy[Union[Sector/@TargetIntegrals],SectorOrdering]//Reverse;
to
Sectors={SectorNumberToSectorIndex[sectorID]};
This is a hourse-butt-effect bug.

[II]
In SyzygyRed.wl
Modified 
If[OptionValue[KillCornerSubsecFIBPs],
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"  Removing IBPs for lower sectors..."]];
		FIBPs1={};
		CornerIBP={};
	
		For[i=1,i<=Length[FIBPs],i++,
			baseIBP=IntegralRealization[FIBPs[[i]],sector];
		
			If[(baseIBP/.sectorCut)===0&&(Union[VectorList[[i,propLocus]]/.BaikovCut]==={0}),
				Continue[];  (* This IBP corresponds to a lower sector *)
			]; 
			AppendTo[FIBPs1,FIBPs[[i]]];
			AppendTo[CornerIBP,baseIBP];
		];
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"\t  ",Length[FIBPs]," Formal IBPs are generated; ",Length[FIBPs1]," Formal IBPs are used. "(*,AbsoluteTime[]-timer*)];];
		FIBPs=FIBPs1;
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"\t  IBPs for lower sectors removed. Time Used: ", Round[AbsoluteTime[]-timer], " second(s)."]];
	];
	
to (to what..? I lost this at 2023.4.6, this part is added at 2024.10.16)
If[OptionValue[KillCornerSubsecFIBPs],
		timer=AbsoluteTime[];
		memoryUsed=MaxMemoryUsed[
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"  Removing FIBPs for lower sectors seeding with DenominatorTypes..."]];
		FIBPs1={};
		CornerIBP={};
		remainedFIBPlabels={};
		For[i=1,i<=Length[FIBPs],i++,
			(*baseIBP=IntegralRealization[FIBPs[[i]],sector];*)
			
			(*If[(baseIBP/.sectorCut)===0&&(Union[VectorList[[i,propLocus]]/.BaikovCut]==={0}),
				Continue[];  (* This IBP corresponds to a lower sector *)
			]; *)
			
			maxDenominatorIndices=Max/@Transpose[DenominatorTypes];(*WARNING: why use max here? what if there is a term (m1-2)G[...], then m1=2\[Rule]subsecIBP but m1=1 not \[Rule] subsecIBP *)
			formalIntegrals=Cases[Variables[FIBPs[[i]]],_G];
			
			FIBPCurrentSectorIntegrals=Union[
				Expand[
					(IntegralRealization[#,maxDenominatorIndices]/.sectorCut)&/@formalIntegrals
				]
			];
			
			If[FIBPCurrentSectorIntegrals==={0},
				Continue[];  (* This FIBP seeds to a lower sector in DenominatorTypes*)
			]; 
			AppendTo[remainedFIBPlabels,i];
			AppendTo[FIBPs1,FIBPs[[i]]];
			AppendTo[CornerIBP,baseIBP];
		];
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"\t  ",Length[FIBPs]," Formal IBPs are generated; ",Length[FIBPs1]," Formal IBPs are used. ",Length[FIBPs]-Length[FIBPs1]," Formal IBPs are removed. "(*,AbsoluteTime[]-timer*)];];
		FIBPs=FIBPs1;
		(*end of MaxMemoryUsed*)];
		If[OptionValue[Verbosity]==1,PrintAndLog["#",secNo,"\t  IBPs for lower sectors removed. Time Used: ", Round[AbsoluteTime[]-timer],  " second(s). Memory used: ",Round[memoryUsed/(1024^2)]," MB."]];
	];
of course, modified default that KillCornerSubsecFIBPs->True

--------------------------------
2023.4.7
[I]
commented out useless codes in Analyze_Sector.wl concerning runningScriptFolder or "running_scripts" tmp folder.

[II]
deleted the old logs in the source code in SyzygyRed.wl

[III]
some linguistic corrections, Comply->Perform

[IV]
Supporting seeding via FIBP Functions. This will make the seeding faster than seeding via replacement.
Detailed modifications:
1.added
If[seedingViaFIBPFunction,
	ClearAll[IntegralRealization];
	PrintAndLog["seedingViaFIBPFunction is on, redefining IntegralRealization."];
	IntegralRealization[FundamentalIBP_,degree_]:=FundamentalIBP@@degree;
]
under 
IntegralRealization[FundamentalIBP_,degree_]:=FundamentalIBP/.Dispatch[Table[m[i]->degree[[i]],{i,1,SDim}]];
2. modified
		Return[term1+term2];
to
If[seedingViaFIBPFunction,
		Return[Evaluate[term1+term2/.Table[m[i]->Slot[i],{i,1,SDim}]]&];
	,
		Return[term1+term2];
	]

in function
IBPGenerator and IBPCutGenerator

[V]
label to a new version: 1.0.0.2



--------------------------------
2023.4.10
[I]
recovered the modfification [IV] in 2023.4.7
but added a redefinition after each of the 2 functions

added a redefinition to Std[ 

[II]
 added 
If[sectorID=!=-1,
	LogFile=LogPath<>ToString[sectorID]<>".txt";
]
in the front of  Analyze_Sector.wl
and commented out this in the latter codes

[III]
modified 
FIntegralSectorISPDegree[fInt_,sector_]:=((fInt/.m[_]->0)/.G->List).(sector-1)
to
FIntegralSectorISPDegree[fInt_,sector_]:=(IntegralRealization[fInt,Table[0,SDim]]/.G->List).(sector-1)
in SyzygyRed.wl 
in order to meet the Functionalized seeding

commented out
IntegralReal[indices_]:=Dispatch[Table[m[i]->indices[[i]],{i,1,SDim}]];
in SyzygyRed.wl 
not used function.

[IV]
REIMPLEMENTING Functionalized seeding!:
commented out all redifinition of functions in SyzygyRed.wl when seedingViaFIBPFunction=True
Defined a new function ZurichSeedingVianFIBPFunctions to seed from nFIBPFunctions.
But we temply donot support seeding via functions in Direct seeding Mode, I have left a warning message in the codes. If user uses Direct Mode, they will see it

[V]
created a backup branch

[VI]
added memory report


[VII]
added 
If[sectorID=!=-1,
	LogFile=LogPath<>ToString[sectorID]<>".txt";
]
in Analyze_Sector.wl
right after Getting SyzygyRed.wl

-----------------------------
2023.4.11
[I]
added sow and reap in ZuirchSeeding functions

[II]
Added ParallelTable in SectorMaps function.


-----------------------------
2023.4.12
[I]
Plugin azuritino, many modifications

[II]
moved finding self-symmetries to the front of AnalyzeSector[...] in SyzygyRed.wl, and give it a If to turn it off if Symmetry is off

[III]
added self symmetry in Azuritino

[IV]
modified 
FIBPISPdegree=IBPISPSectorISPDegree[#,sector]&/@(FIBPs/.m[a_]->0);
to 
FIBPISPdegree=FIBPSectorISPDegree[#,sector]&/@(FIBPs);
in AzuritinoMIFind[...]
to fix a bug

and modified its default degBound->0

----------------------------------
2023.4.13
[I]
added version notice in the beginning

[II]
fixed an mistake code in zurich seeding for loop steps:
modified
Flatten[SeedMerge[NumeratorShifts[sector,#],DenominatorTypes]&/@Range[0,OptionValue[ZurichInitialSteps]],1]
to
seeds=Flatten[SeedMerge[NumeratorShifts[sector,#],DenominatorTypes]&/@{step},1]
this is an apparant mistake... though not causing severe errors, but it will make the IBP relations a little more (lacking some self symmetry relations in high degree, who should be there.)

[III]
let the user to input finite field modulus, AzuritinoIntersectionDegreeBound, and NeatIBPIntersectionDegreeBound

[IV]
commented out double defined or unneeded function in SyzygyRed.wl: 
IBPWeight
IntegralSectorOrder
BlockMatrix
SectorWeightMatrix

redefined:
IntegralWeight

[V]
some Global symbols in Critical point implementations, cc and w. modified them to local vars

[VI]
added codes in Initialization.wl:
If[FileExistsQ[#],Run["rm "<>#]]&[outputPath<>"tmp/"<>"initialized.txt"];
to fix: if a ini failed running with an existing outputPath, the program will summarize again... unconfortable.


[VII]
exchanged position of section Validating Inputs and section Setting outputPath in Initialization.wl

[VIII]
Allow user to determine whether singular temporary files should be deleted once they are used. Yes by default.

[IX]
Modified a sequential evaluation to parallelized in CheckIBP.wl.:Analyzing reduction results (step 2/3)

[X]
modified
SectorIntegrals=Select[IntegralList[nIBPs,SortTheIntegrals->False],Sector[#]==sector&];
to
SectorIntegrals=Select[IntegralList[nIBPs,SortTheIntegrals->False],Sector[#]==sector&];
SectorIntegrals=SortBy[SectorIntegrals,IntegralOrdering]//Reverse;
in SyzygyRed.wl (only in Zurich method, ommiting Direct)

-------------------------------------------
2023.4.14
[I]
Hefeng updated SparseRREF to allow SRFindPivots

[II]
deleted some unneeded codes in SyzygyRed.wl related to probeTheFunctions
commented out unused function IBPtest in SyzygyRed.wl

[III]
add an option to use SRFindPivots in IndepedentSet

[IV]
modified Sector[#]!=sector& to Sector[#]=!=sector& in function IBPSubSectorDegree in SyzygyRed.wl
I do not fully thought about this and I think it is ok


-------------------------------------------
2023.4.15
[I]
added a judgement in Summary.wl to refuse summarizing if not all missions are finished.

[II]
commented out a line
SectorIntegrals=Select[IntegralList[nIBPs],Sector[#]==sector&];
in SyzygyRed.wl
labeled by the date 2023.4.15
this seems to be a repeated code and of course unecessary...

[III]
fixing the case that SectorIntegrals={}
two major changes...
one of them is adding:
If[SectorIntegrals==={},
...
]

[IV]
in MissionStatusChecker.wl
code
If[Complement[Union[missionStatus[[All,2]]],{"ComputationFinished"(*,"Computing"*)}]==={},
		script="echo \"finished!\"\n";
		Break[];
	];
nonakano "Computing" is commented out.
This and today`s [I] solves a comment:
If bottom sector terminate unexpectedly, the process will NOT stuck and summarize. We should prevent this! Add a status checker to ensure all sectors finished before summarizing! Or maybe we can solve this from MissionStatusChecker, to modify one of its deciesion process. It terminates iff all mission finished.

[V]
labbeled new version 1.0.1.2

[VI]
added a fail report in SyzygyRed.wl 
If[step==s+OptionValue[AdditionalDegree],
	PrintAndLog["#",secNo,"\t\t  ","Targets are still not reduced to MIs in the maximum step ",step,". Failed.\n****** Sector ",secNo," Failed. ******"];
	Quit[];
]

-----------------------
2023.4.17
[I]
added PrintAndLog in Ini and Summary


[II]
modified 
If[Det[DM]^2!=1,Continue[]]; 
to 
If[Factor[Det[DM]]^2=!=1,Continue[]]; 
in MomentumMap

[III]
adding FindInstance implemented by YZ in MomentumMap, many modifications 

-----------------------
2023.4.19
[I]
Many Modifications in Pak_Algorithm.wl, upgrating MomentumMap

[II]
Hefeng provided Spack scripts.

-----------------------
2023.4.20
[I]
Imported DeeperMomentumMap from YZ

[II]
if propagators are not linearly dependent and complete, let user know and wont compute

[III]
removed a option in default_settings.txt:
SubsectorIntegralPreference = "NumeratorDegree"
maybe I planned to add corresponding codes but gave up due to its being unnecessary?

-------------------------------
2023.4.21
[I]
modified Azuritino

--------------------------------
2023.4.23
[I]
many modifications to solve not-reduced problem, including adding new function ReduceTowards in SyzygyRed.wl

---------------------
2023.5.1
[I]
fixed a bug in ReduceTowards in SyzygyRed.wl, the previous version did not consider if targets are reduced or irreduced, would produce 200+ fake MIs. Now it won`t.

---------------------
2023.5.4
[I]
modified DenominatorTypeCompleting in SyzygyRed.wl, adding strategy "CompleteForEach" and set it to default.

[II]
Added report in Summary.wl to notice MI number difference with Azuritino


[III]
Added FindIBPs, many codes. to find more IBPs with seeds with denominator power indices lifted if curren MI number is larger than Azuritino.

[IV]
new version : 1.0.2.0

[V]
some new reports in sub section Row Reduce Modules in SyzygyRed.wl

-----------------------
2023.5.5
[I]
redesigned the algorithm for SymmetryMap in SyzygyRed.wl. Recoded it.

[II]
modified FindIBPs, not inputing large values basicnIBPs_ and basicSectorIntegrals_ ,
modified the denLift for loop inside to start from 0 rather than 1

[III] one modification in SyzygyRed.wl:
(*rawIBPs=SymmetryMap[sectorMaps,#]&/@rawIBPs;*)
rawIBPs=SymmetryMap[sectorMaps,rawIBPs];

------------------------
2023.5.6
[I]
modified:
SymmetryMap and ReduceTowards in SyzygyRed.wl
SymmetryMap: debugged the "Backward" mode rep and changed default direction to "Foreward"
ReduceTowards: considered irrelavant target integrals

----------------------------
2023.5.9
[I]
Added many codes in SyzygyRed.wl and Summary.wl
to addin AdditionalMISymmetries related usages

[II]
new version number 1.0.2.1

-------------------------------
2023.5.11
[I]
commented out an unused function in SyzygyRed.wl:
(*IBPSectorHeight[IBP_]:=Block[{LT},LT=LeadingIntegral[IBP]; If[LT==={},Return[-1],Return[SectorHeight[Int]]];];*)

[II]
added variable name protection step in Validating Inputs section in Initialization.wl. But we still need to add more names appear in Initialization.wl, Analyze_Sector.wl .... into the list ProtectedNames in Initialization.wl


[III] 
modifications in Initialization.wl:
(*If[FileExistsQ[#],Run["rm "<>#]]&[outputPath<>"tmp/"<>"initialized.txt"];*)
If[FileExistsQ[outputPath<>"tmp/"<>"initialized.txt"],
	Export[outputPath<>"tmp/"<>"once_initialized.txt",""];
	Run["rm "<>outputPath<>"tmp/"<>"initialized.txt"]
];
and in PrepareForContinueCompuation.wl:
If[FileExistsQ[tmpPath<>"once_initialized.txt"],
	Export[outputPath<>"tmp/"<>"initialized.txt",""];
]
to solve the comment:
I cannot  continue.sh after an mistaken attempt of ./run.sh? Nonesense.. (initialized.txt removed in the attempt)

[IV]
new version number 1.0.2.2

----------------------------------
2023.5.14
[I]
optimizations on CompensationIBPDenominatorDegrees
changed to
CompensationIBPDenominatorDegrees=Table[-1,Length[rawIBPs]];
	For[i=1,i<=Length[rawIBPs],i++,
		If[And[FreeQ[rawIBPs[[i]],FI0],FreeQ[rawIBPs[[i]],ZM0]],
			Continue[];
		];
		CompensationIBPDenominatorDegrees[[i]]=IBPSubSectorDenominatorDegree[nIBPs[[i]]]
	];
maybe even if the "If" does not really run the 3rd arguments if the 1st arg is True, if the 3rd argument is large (such as nIBPs), the If code is still time and memory consuming...

[II]
added a setting to silence the warnings in MomentumMap

[III]new version 1.0.2.3

----------------------------------
2023.5.23
[I]
fixed a bug in Summary.wl 

[II]
added allowing additional outputs

[III]
new version 1.0.2.4

---------------------------------
2023.9.4
[I]
 in SectorAnalyze:
I made plenty modifications, to cut nIBPs once new ones generated, rather than cut them together. This makes the computation faster. (not doing this in FindIBP because already did... but name of the vars are different)
Meanwhile, do the same to SectorIntegrals

in FindIBPs:
.../.sectorCut -> (#/.sectorCut)&/@...
not faster, but less memory used

[II]
added FlexibleNeatIBPIntersectionDegreeBound

---------
2023.09.12
[I]
added spanning cuts but not finished

[II]
in the past few days (a week or so), I added SimplifyByCut (not recorded), but this makes the vectors larger (even less the number). I turned it off in the default settings.

---------
2023.11.02
debugModification20231102:
In Azuritino, the criticle point method:
in the older version, we take MaxISPD=MinISPD+2, but some example shows that this is not enough. We modified it to:
MaxISPD=MinISPD*2+3 (to be conservative.)
However, this sometimes makes the max degree too high, we add an additional Break[] condition: if the MI unchange for continuous 2 steps, we break. (Previously we do not have this condition, just stupidly seed to the max degree.)

version 1.0.2.6

---------
2023.11.08
[I]
found a deeply lurking bug
In SectorAnalyze[], ini steps, if there are no sector targets, in the previous version, it does not Return[], although I wrote this
the reason could be, the Return[] is inside a MaxMemoryUsed[], so it just skip the rest steps in this MaxMemoryUsed, rather than Module[{},...]
now this has beed fixed

[II]
fixed incorrect timing and memory reports

[III]
in SyzygyRed.wl, SectorAnalyze[], removing zero sectors step, modified 
rawIBPs=Factor[CoefficientArrays[rawIBPs,integrals][[2]]] . integrals; 
to
rawIBPs=IBPCoefficientForm[CoefficientArrays[rawIBPs,integrals][[2]]] . integrals; 
where
IBPCoefficientForm is a option setting in default_settings.txt, defaultly, IBPCoefficientForm=Expand;
reason:
Factor some times is too slow


---------
2023.11.11
[I]
now, user can specify sectorwise settings in config.txt

[II]
added Lift selection and Further selection in SimplifyByCut


---------
2023.11.12
[I]
implemented Yang Zhang's SyzygyShorten into SyzygyRed.wl, SimplifyByCut[]
also, when using this function, I make CornerOnly->(DenominatorTypes==={sector}), if there are only corner target integrals, CornerOnly will on and the syzygy vectors will be less than CornerOnly->False.
and alalso, allow a setting of stricty while selecting syzygies

[II]
new version
1.0.2.7

-------------
2023.11.14

[NeatIBP 1.0.2.8]
Date: 2023.11.14
	1. Allowing setting Singular ordering through config.txt

-------------------
2023.11.27
fixed a typo/bug in Pak.wl
gramdet2 typo gramdet2=Det[Expand[KroneckerProduct[vectorsImage,vectors]]/.kinematics]//Factor
to
gramdet2=Det[Expand[KroneckerProduct[vectorsImage,vectorsImage]]/.kinematics]//Factor

------------------
2023.11.30
Fixed a fatal bug in SyzygyRed.wl, SimplifyByCut:
selectedIndices=Select[Range[Length[vectorsInputSorted]],Union[liftMatrix[[All,#]]]=!=0&];
->
selectedIndices=Select[Range[Length[vectorsInputSorted]],Union[liftMatrix[[All,#]]]=!={0}&];

[II]
Added LiftSelectionStricty

[III]
added option AllowingCornerOnlyModeInSimplifyByCut in default_settings.txt

----------------
2023.12.06
commented out 
(*ForwardRep[2]=Join[Table[ScalarVar[[i]]->ToExpression["z"<>ToString[i]],{i,1,SDim}],Table[Parameters[[i]]->ToExpression["c"<>ToString[i]],{i,1,Parameters//Length}]];
	BackwardRep[2]=Reverse/@ForwardRep[2];*)
in Prepare[] in SyzygyRed.wl
which was incorrect, and not used.


--------------------
2023.12.10
added preload subdir, let user set the mathematica command and shell processor. Now the shell prosessor is sh. We will later modify it to bash.

version 1.0.2.10

--------------------
2023.12.19
Included kira interface
Modified kira interface to use preload folder, mathematica command definable.

version 1.0.3.0

--------------------
2023.12.21
Hefeng: let user set AllowInternet in config.txt
version 1.0.3.1


--------------------
2023.12.25
zihao:
1. Let user repermute (kinematic) parameters in config.txt
2. Added "wp" ordering for Singular. By default, this weight zi's as 1 and parameters as 0 when counting degBound.
3. Added more additional output options: ExportUsedFIBPs and ExportAllSyzygyVectors.


more:
added PrintAndLog["Exported contents to ",path] to ConvenientExport


--------------------
2023.12.27
zihao:
1. User nolonger need to run NeatIBP in the working folder. They can run NeatIBP by .../NeatIBP/run.sh [configFile]. If [configFile] is not specified or not valid, by default it is ./config.txt.

2. Added more additional output options for developers: ExportCornerKilledFIBPs and ExportFinalRawIBPs

Hefeng and Zihao:
3.Debug in PackAlgorithm, in Extended orthogonalization method
modified
If[vectors===vectorsImage,Return[IdentityMatrix[d]]];
If[vectors===-vectorsImage,Return[-IdentityMatrix[d]]];
to
If[vectors===vectorsImage,Return[#->#&/@external]];
If[vectors===-vectorsImage,Return[#->-#&/@external]];

4.Debug in PackAlgorithm, in delta plane projection method, added:


zihao:
5. Spanning cuts in parallel implemented

v1.0.4.0

--------------------
2023.12.27 - more
Hefeng: 
	1. Bug fixing in SparseRREF.so

v1.0.4.1

--------------------
2024.1.1
Zihao:
   spanning cuts completed, auto summary.

-------------------------
2023.1.2
zihao:
delete 
If[FileExistsQ[#], Export[#, "0"]] &[
 TemporaryDirectory <> "start_abs_time.txt"]
in 
PrepareForSpanningCuts.wl
this code shouldnt have been here.


zihao:
integrating FinishedOutputPathQ in Initialization, including spanning cuts mode case

modified some local var name in monitor CutMissionInfo[cut_] (status to info), just for wording goodness

spanning cuts monitor upgrated

v1.0.4.2


<<<<<<< HEAD
-----------------------------
2023.1.3
zihao:
Bug fix: after redefining spanning cuts, overwrite them on disk, otherwise, Summary.wl will read the wrong spanning cuts 


=======
------------------------

2024.1.25

hefeng:

minor bug fix according to report: redirected SpaSM directory to global var "SpaSMLibrary" in SparseRREF.m
>>>>>>> 87b0201a91652dc29eb98517fc59f45192bf732d

v1.0.4.3

=======

-------------------------

2024.1.26

zihao:

Refined output directory structure in spanning cuts mode

-------------------------

2024.2.26
zihao:
added additional outputs:
ExportFinalRawIBPsInFI0
ExportFinalNIBPs
ExportFinalNIBPsCutted

ExportCompleteRawIBPs
ExportCompleteRawIBPsInFI0
ExportCompleteNIBPs
ExportCompleteNIBPsCutted
ExportSubsecRemovedRawIBPs
ExportSubsecRemovedRawIBPsInFI0
ExportSubsecRemovedNIBPs
ExportSubsecRemovedNIBPsCutted
ExportSortedRawIBPs
ExportSortedRawIBPsInFI0
ExportSortedNIBPs
ExportSortedNIBPsCutted
ExportIndependentRawIBPs
ExportIndependentRawIBPsInFI0
ExportIndependentNIBPs
ExportIndependentNIBPsCutted

added option SilentExport

------------------
2024.4.15
added SkipLiftInLiftSelection (*if this is true, then only use further selection, skip LiftSelection*)

V1.0.4.5


--------
2024.4.22
added SpanningCutsIBPShorten, and created MD5 certificate in spanning cuts check.
But the above 2 modifications are currently git ignored.

------------
2024.4.23
added FurtherSelectionTimeUsedLimit

----------------
2024.4.26
modified NeatIBP to kira .wl, added IntegralLabelling, make the ordering manifest for kira Usr.Def.Sys.

-----
2024.5.30
zihao:
1.deleted unneeded file /interfaces/Kira/interface/test.wl
2.In kira interface, NeatIBPToKira.wl, modified the IBP ordering criterion to {highest, Length, 2nd highest, 3rd highest,....}. It used to be {highest, 2nd highest, 3rd highest,....}
3.In Pak_Algorithm.wl, rewritten IntegralMomentaGroup (original codes commented out). Added a function to use the new ext. momenta grouping algorithm I suggested. But now I havent interface this to the config settings of NeatIBP, it is not yet online
4. record the version of NeatIBP used in log_files/initialization.txt

----------------
2024.05.31
zihao:
Found a stupid bug in SyzygyRed.wl, where I use IBPCoefficientForm[CoefficientArray[...]]
In mathematica, Factor[SparseArray] will Factoe all its entries, but Expand[SparseArray] changes nothing... this is really nonsense...
I fixed this problem by rewriting the function CollectG, extending its options, and use it where the problem occurs.

-----------------
2024.06.05
remove FFSolveIBP.wl, FFSpanningCutsConsistencyCheck.wl, FFSpanningCutsIBPShorten.wl, from .gitignore
Moved SpanningCutsCombine.wl from Kira interface folder to NeatIBP root folder, renamed as 
ReducedSpanningCutsCombine.wl, and removed it from .gitignore
However, these scripts are not linked to user's interface, even if they are now visible. The user interface is still under construction.
v1.0.4.6

------------------
2024.6.13
zihao:
added a progress reporter in function IBPstoKiraString in NeatIBP to Kira converter (.wl) in Kira interface

-----------------
2024.6.24
zihao:
added ExtRREF in IntegralMomentaGroupFeynPar in Pak_Algorithm.wl

-----------------
2024.6.25
zihao:
fixed a bug in FindSymmetry[sec1_,sec2_] in SyzygyRed.wl. Before the fix, it will say {1,1,1,1} is an unexpected input. This is wrong.
v1.0.4.7


----------------
2024.6.30
modified typo DeltaPlainProjection to DeltaPlaneProjection
modified the default setting of PreferedExternalExtendedRotationMethod as DeltaPlaneProjection


--------------
2024.7.15
zihao:
1. renamed folder name: KiraInput -> KiraIO
2. allowing additional config input into KiraToNeatIBP.wl
3. finished ReadKiraReductionResults.wl


--------------
2024.7.16
zihao:
1. added issue reduction task in Summary.wl

--------------
2024.7.20
zihao:
1. in Summary.wl, modified integralList=IntegralList[IBPs] to
integralList=IntegralList[Join[IBPs,MIs]];
otherwise, some MIs may be missing in the integralList
2. Kira interface finished construction, not including the spanning cuts.
3. v1.0.5.0

------------------
2024.8.13
zihao:
1.Adjusted Singular interface IO, added time constrain on them.

some date:
including spanning cuts in kira interface

-----------------
2024.8.27
1. added parallel job number for kira
2. allow to set run_firefly in kira (not tested yet)
3. fixed a bug in kira parallel reduction

------
2024.9.6
v1.0.5.1
change default of kira parallel reduction to true


-----
2024.9.19
added config: false in kira job.yaml template

------
2024.10.14
zihao:
I used Dispatch in NeatIBPToKira.wl. The unbearable slow speed is now a history. Say, I accelerated it by 100 times. Yeah.

v1.0.5.2

-----------------
2024.10.17
modified terminology in the codes:
NCorner means numerator-corner, i.e. numerator=1
DCorner means denominator-corner, i.e. no multiple props in deno.

introduced FIBPs00 and VectorList00, to make the module AdditionalIBPs and SimplifySyzygyVectorsByCut consistent.

--------
2024.10.22
I changed terminology: spc combine -> spc merge , in every parts of the codes.
 the monitor will tell the user if the lost/unlabbeled message disappears soon, please ignore.

------------
2024.10.23
1. added a tag file to tag that NeatIBP is finished
2. logging kira interface


-----------
2024.10.24
modified 
TemporaryDirectory<>"/run_cut.sh "
to
TemporaryDirectory<>"run_cut.sh "
at several places in PrepareForSpanningCuts.wl
 

--------------
2024.10.25
1.v1.0.5.3


2.In 2024.4.13, I 
Modified a sequential evaluation to parallelized in CheckIBP.wl.:Analyzing reduction results (step 2/3)
It seems that I wished to fasterening this step...
but, today I think it is because of using Position why this step is slow (I guessed by my experience, I did not test.)
So, I cancelled ParallelTable here. and  Position -> Dispatch
Cancelling ParallelTable is good for MMA kernel limiting.
Also, in FFSolveIBP, I just cancel ParallelTable.


3.modified kira interface log path

4.log FFSolveIBP and consistency check


----------------
2024.10.26
1.log AssignIBPReduction.wl FFSpanningCutsIBPShorten.wl

---------------
2024.10.28
1.Use SpanningCutsMode=True to set NeatIBP into spanning cuts mode. No longer recommend gramma CutIndices="spanning cuts". Although it is still supported.
2.Based on this, let NeatIBP runs spanning cuts with in case that there exist cut indices. (i.e. CutIndices={1,2,3...}; SpanningCutsMode=True)

--------------
2024.10.30
1. set consistence check as mandatory even not at -s mode in IBP reduction.(unless the user set SpanningCutsConsistencyCheck=!=True, which is not default.)

2.commented out:
string=StringReplace[string,{"CutIndices="~~Shortest[x__]~~"\n"->"\n"}]
in 
PrepareForSpanningCuts.wl
because it is not needed and cause bug
why:
(*CutIndices="spanning cuts";*)
will become:
(*
leaving a half comment bracket... causing Syntax error

---------------
2024.10.31
1. added 
If[FileExistsQ[#],DeleteFile[#]]&[outputPath<>"tmp/"<>"initialization_failed.txt"]
In
Initialization.wl
otherwise, after a given up attempt of initializing, the outputPath will be labelled initialization_failed forever.

2.In Monitor.wl
modified
If[FileExistsQ[outputPath<>"tmp/spanning_cuts_mode.txt"]&&FileExistsQ[outputPath<>"tmp/run_all_cuts.sh"]&&mode=="normal",
to
If[FileExistsQ[outputPath<>"tmp/spanning_cuts_mode.txt"]&&FileExistsQ[outputPath<>"tmp/run_all_cuts.sh"]&&mode=="normal"&&InitializationStatus[]==="finished",

---------------
2024.11.5
1.modification in Analyze_Sector.wl for WorkerAllocationSystem.
2.In M....Monitor.wl, modified
StringJoinLined[a_,b_]:=If[a==="",b,a<>"\n"<>b]
to
StringJoinLined[a_,b__]:=If[a==="",StringJoin@@({b}),a<>"\n"<>StringJoin@@({b})]


---------------------------
2024.11.12
1. Constructing the Kernel Distribution System
2. In Monitor.wl, in normal mode, I added a "read status" step into the PrintStaus[] Function to avoid miss-report of lost sectors.

----------------------------
2024.11.13
Introduced a new status "AboutToCompute"
When MissionStatusChecker start an Analyze_Sector, it will be modified as "AboutToCompute"
Then modify the status to "Computing" using MissionStatusChecker printed script

the status "AboutToCompute"  is interpreted as "Computing" in MissionStatusChecker.wl
but interpreted as "ReadyToCompute" in MissionStatusMonitor.wl

my purpose is:
a.do not let the Monitor miss report lost sectors
b.do not let the StatusChecker miss think an  mission is not computing before the corredponding Analyze_Sector.wl label its status as "Computing".

------------------------
2024.11.14
Finished the implementation and testing of Kernel Distribution System 

-----------------------
2024.11.19
1. Supporting GNUParallel in SPCIBPReduction
2. Setting terminology adjustment, some original Kira settings are actually IBPReduction setting, 
what are new:
SPCIBPReductionParallelization=True;
SPCIBPReductionParallelizationMethod="Naive";(*or "GNUParallel"*)
SPCIBPReductionParallelJobNumber=Infinity;
UseShortenedIBP=True;(*only valid for spanning cuts mode*)


-----------------------
2024.11.20
1.Supporting GNUParallel in Consistency Check

-----------------------
2024.11.21
1. Fixing a bug:
If a target a itselt is MI, the IBP reduction will not give a rule a->a, so we have to add it manually. The modifications include:

1.1 In FFSolveIBP.wl
added
targets0=targets

and modified
sol=Select[rules,MemberQ[targets,#[[1]]]&]
to
sol=#->(#/.rules)&/@targets0;

(but this seems to be not influencing consistency check, since consistency check uses rules.txt not sol.txt)

1.2 In CheckIBP.wl
added relavant codes:
If[IBPs==={},
	Print["There is no IBP relations."];
	strangeIntegrals=targets;(*because we already have targets=Complement[targets,MIs] in the above*)
	CheckReport[];
	Exit[];
]
and 
If[MemberQ[MIs,integral],Return[{integral}]];

1.3 In ReadKiraReductionResults.wl added:
targetListStr=Import[outputPath<>"KiraIO/list","Text"]
If[targetListStr===$Failed,
	PrintAndLog["Failed to read targets in ",outputPath<>"KiraIO/list.  Exiting."];
	Exit[];
]
targetList=ToExpression/@DeleteCases[
	StringSplit[StringReplace[targetListStr," "->""],"\n"],
	""
]
and
targetListG=targetList/.Tuserweight[x_]:>integrals[[-x]]
and
IBPTable=#->(#/.kiraListG)&/@targetListG
and modified
Export[reductionResultsFolder<>"reduced_IBP_Table.txt",kiraListG//InputForm//ToString]
to
Export[reductionResultsFolder<>"reduced_IBP_Table.txt",IBPTable//InputForm//ToString]

1.4
Should also modify ReducedSpanningCutsMerge.wl
Oh but we already have an ensurence that
If[MemberQ[targetReducedFormulatedMIs,MI],
	newCoeff=MI/.targetReducedFormulated
,
	newCoeff=0
];
I think we need not to worry about this.


p.s. The OrderedIntegrals has considered this issue in former development, i.e. 
integralList=IntegralList[Join[IBPs,MIs]]

2. Fixied a long-lasting Azuritino MI report problem
2.1 Quit a sector if local target === {}, this sentence is moved out of a MemoryUsed[], so that the Return[] works for AnalyzeSector[] rather than MemoryUsed[].
2.2 modified 
Get[azuritinoMIFolder<>ToString[#]<>".txt"]
to
If[FileExistsQ[azuritinoMIFolder<>ToString[#]<>".txt"],
	Get[azuritinoMIFolder<>ToString[#]<>".txt"]
,
	{}
]
In Summary.wl

-----------------------
2024.11.23
Fixed a bug in Naive parallelization:
in AssignIBPReduction.wl:
If[Mod[i,SPCIBPReductionParallelJobNumber]=!=0  -> If[Mod[Length[spanningCuts],SPCIBPReductionParallelJobNumber]=!=0
In FFSpanningCutsConsistencyCheck.wl
If[Mod[i,jobNumber]=!=0 -> If[Mod[Length[spanningCuts],jobNumber]=!=0,
Because for example after For[i=1,i<=5,i++,xxxx], we have i=6
so, using Length[spanningCuts] is more clear and safe

----------------------
2024.11.24
1. Setting rename:
UseShortenedIBPs -> UseShortenedSpanningCutsIBPs
ShortenIBPs -> ShortenSpanningCutsIBPs
and 
set UseShortenedSpanningCutsIBPs=Automatic as default, this is more convenient for users.

2. Added targetList=Tuserweight/@targetList in ReadKira.....wl in Kira interface. This is a debugging.

---------------------
2024.11.26
1.Build continue spc:
1.1 added "spanning_cuts_behaviour.tag" in Initialization.wl and PrepareForContinueComputation.wl
1.2 In AllMissionCompleteQ.wl added code block:
spcBehavior=Import[tmpPath<>"spanning_cuts_behaviour.tag","Text"];
Switch[spcBehavior, ....]
1.3 In PrepareForSpanningCuts, added codes with spcBehavior and continue_cut.sh
1.4 In KernelDistributionHQ.wl, added codes relevant to ClearFolderFiles

-------------------------
2024.12.25
1. Process check before continuing
2. Not letting Assign.wl to modify once_summarized to summarized
3. Before continuing spc, NeatIBP now checks if there are cuts with unfinished ini. If so, stop running and tell user to delete corresponding folders. If a cut is totally not started, it runs Ini.wl first.
4. Delete kira.db after use.
5. It seems GNUParallel for Consistency check is already done.
6. Setting rename: ReductionOutputName -> OutputName

-------------------
2024.12.26
1. In SyzygyRed.wl, AnalyzeSector[],
modified

					NeatIBPIntersectionTimeConstrain,
					"SingularIntersectionTimeOut"
				];
				If[VectorList==="SingularIntersectionTimeOut",
					PrintAndLog[
						"#",secNo,
						"  Singular intersection time exceeds limit (",
						ToString[NeatIBPIntersectionTimeConstrain],
						


to

					NeatIBPIntersectionTimeConstrain,
					$Failed
				];
				If[VectorList===$Failed,
					PrintAndLog[
						"#",secNo,
						"  Singular intersection returns $Failed at time limit (",
						ToString[NeatIBPIntersectionTimeConstrain],


because a mathematica time constrain dose not constrain Run[] because this is not an abs time constrain
so I remember I have updated this in Singular interface by using shell command "timeout"
but it seems that this part is not updated according to that.

2. Setting renamed: xxxxStricty -> xxxxStrictness

-----------------------
2024.12.28 
1. Setting renamed: SkipLiftInLiftSelection -> SkipLiftSelection

--------------
2025.01.02
1. added CopyFile2 in Summary.wl and replace CopyFile using it. This is for the case that spanning cuts mission failed, to stop summarizing.

2. renamed FFSpanningCutsIBPShorten.wl to SpanningCutsIBPShorten.wl

v1.1.0.0











