

==========Urgent===================
GB.sing sometimes stucks... give them a time limit!

We seem to give user a freedom to input kinematic files and target integral files, but the file names (targetIntegrals.txt, kinematics.txt) are actually hard coded in many many places. Try to fix this... Currently, we just forbid user to use this.

continue.sh for spanning cuts

spanning cuts with CutIndices=!={}. Now only added a setting SpanningCutsMode=False in default_settings.txt

It is not so safe to judge output path finished or not by existance of IBP_all.txt, this file can be writing using a few seconds, what if user launch a new process in these seconds? The safer way is to generate a tmp file "summary_finished.txt" in the final stage. And, this is not suitable for spanning cuts mode.

reading actually running missions is too slow, try ommit reading finished cuts and not-started cuts in the next monitor upgrade.

We have assumed that the user calls the config file "config.txt" but what if they don't? This matters CheckIBP, SolveIBP and SPanningCutsCheck!

NeatIBPToKira.wl: The KiraInput result are exported to Directory[], the directory which the terminal opens, this is not reasonable!  

2023.12.27
Hefeng:
So if one replace all the parameters to constants, it will trigger a bug 
with SingularIntersectionMaker[] function in SyzygyRed.wl.
One may find after
If[parameters=={},parameters=parameterRedundant[[{1}]]];
the parameters reads:
                {}[[{1}]]
After replacing , [[1]] will be written into Singular script as 
parameter, which triggers the bug.
In the attachment is the Singular script.
One more thing, this bug should also be with SingularGBMaker[] function.
One may double check the functions regarding the similar expression as 
"(vars, paras)"

2023.12.29
YongQun:
kira interface: momentum conservation convention, consider user do not input dependent momentum and make conservation condition as []

2023.12.25:
1. Let user repermute (kinematic) parameters in config.txt
2. Added "wp" ordering for Singular. By default, this weight zi's as 1 and parameters as 0 when counting degBound.
3. Added more additional output options: ExportUsedFIBPs and ExportAllSyzygyVectors.
but we need to test all 3 for dbox and:
 - the 1st one for diagrams with more parameters (also ,look into the code carefully for possible different definition for the parameters, incase that some are permuted and some are not. especially to search for like Compelement, Join, Intersection, or Variables, if I redefined the parameters, I very possibly used such commands)
 - the 3rd one for some cases with FI0


what if the targets are all MI (or on a sector all MI)? There will be IBPs={} and OrderedIntegrals={}

spanning cut
kill zombie process 
^C while SpaSM will cause zombies
Theoretically, The syzygy shorthen with CornerOnly is inconsistent with AdditionalIBPs

About the stricty selection, "random" recovering the deleted vectors is not so good, we need to pick up simple ones.

Some user may still need cut (partially, like {1,2}) in spanning cut mode

we need a handbook

==========Important=================
issue in the dev_log.txt at 2022.0923 [II] needs to be considered.

seeding denominators by denominator types is very very risky, what if FIBP decends all denominator indices? The seeding will never end because it dose not cover enough denominator degree!
Oh there is another problem discovered by user, the seeding of denominator indeed need to be rebuilt! debugModification20230314 is a temp rescuring!
and, what if FIBPs -> {} after removing subsec FIBPs? must consider (a1-1)G[a1, a2,...] when a1 only takes 1 in denominator types...

some OS does not use "math" to run mathematica in commandline

plugin RW`s singularGB into MomentumMap, currently in temp_files

need to improve the sub sector integral degrees, now is abs degree, need more options

we can also use SRFindPivots in IBPAnalyze

a comment in SyzygyRed.wl: (*FIBPFunction is a function with #, is it still safe to use # again here?*)


modify seeding implementations to C

add option ClearTempFolders in configs


remove subsec IBPs before throwing it into Spasm

 is it necessary to export relavant_integrals in Analyze_Sector.wl?

numeric point could be not general enough! For example, in doublepentagon, I once set {s12->1,s23->3,s34->73,s45->7,s15->213,...}
then, accidently, one IBP coefficient is (s12+2s23-s45), it vanished! Then NeatIBP gave wrong results.
There are 2 solutions:
1. recently, we can tell the user to set up a generic enough point. And let them know it would give wrong result if it is not generic enough
2. midtermly, build a detector to see if above situation happens
3. longtermly, rewrite the work flow to let the user putin more generic points.

if we generates numeric points randomly, we should add the values of numeric points (and d) into output.


Check if replacement replaces the variables to numerics, if not, send a warning

[SyzygyRed.wl]
There are some global variables named "m" or "z" "x" "y"  etc. in the code. 
  They`d better be changed to some longer names, to avoid possible \
contradiction with user`s code. (Like Litered`s "j").
  But considering we will use this in commandLine, this is not that \
important
 No, it is important if user defines some kinematic variables like m[1]...
But this is equivalent to considering what if user uses same function names as us. Is there anyway to prevent them to do so in the 3 input files? 
--2023.5.11: added variable name protection step in Validating Inputs section in Initialization.wl. But we still need to add more names appear in Initialization.wl, Analyze_Sector.wl .... into the list ProtectedNames in Initialization.wl




also, n=Length[ExternalMomenta]+1;
	L=Length[LoopMomenta];
same issue as above

Some parameters need to be made optional, eg. degree bound

SDim seems unecessary in the code, try get rid of it?

The IntegralOrder is a global variable... not so good, we would be better set a default value of it. 





RelavantIntegrals is useless... We do not need to export them.


Consider a question: Can user compute 2 or more different projects at the same time?

Clean up useless trashes!

Common input errors:
external momenta not represented by Kinematics, 
generic point not cover all kinematic variables

why do we need to seed starting from initial step +1 in the for loop? What if the initial step IBPs are already enough for the targets?

figure out why there is a label (* this is not the final MI *)


add diagram name into monitor

We have not proved that the projection way to find ext momenta symmetry always guarantee that the w transform always have solution...

=============Not Important=================
SectorNumberToSectorIndex:
1.Integrate this into SyzygyRed.wl
2."Sector index", this name is misused, will cause confusion. Sector index in SyzygyRed means {1,2,3,4,5,6,7}, not {1,1,1,1,1,1,1,0,0}, but this function is defined as the later one.

we need to include MaxCutsInParallel

Function name typo: IndepedentSet

messages in DeepMomentumMap are ugly in terminal if ParallelTable is used

why do we need to set TemporaryDirectory everywhere?

Generate nFIBPs is slow because of CoefficientRules, I do not know the way to improve it.
Zurich seeding step for high degree seeds is slow, which is due to Replacements in function IntegralRealization. Also, no idea for improvements for now.

in MissionStatusChecker.wl, the first code block, ......=Infinity, I do not know why...

what does "mapped sectors" mean? the naming in the codes are confusing. the concept "mapped and sub sectors" is not accurate. it should be "image or sub sectors."

In Initialization.wl, there is a comment:
(*
Here, some targets from symmetry are collected and will be labeled to be from sector "-1" (which means from user input.)
But they are not!
Although they will not cause error but may cause confusion while debugging.
No need to change, but better to change.
*)
Can be improved.

=================version 2 comment================
can we avoid vector->FIBP->IBP? it is slow, can we do vector->IBP?

in version 1, the parameter/option transmission way is really a mess. some are defined variables, some are options in the defined functions... improve this. 


